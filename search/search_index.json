{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#azure-mail","title":"Azure Mail","text":"<p>A Python package for sending emails in Office 365 via an Azure app</p> <p>This project is developed in collaboration with the Centre for Advanced Research Computing, University College London.</p>"},{"location":"#about","title":"About","text":""},{"location":"#project-team","title":"Project Team","text":"<p>MIRSG</p>"},{"location":"#research-software-engineering-contact","title":"Research Software Engineering Contact","text":"<p>Centre for Advanced Research Computing, University College London (arc.collaborations@ucl.ac.uk)</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#pre-requisites","title":"Pre-requisites","text":"<ol> <li>create an app in Azure for sending emails</li> </ol> <p>Before using <code>azure-mail</code>, you will need to create an app in Azure with the    necessary permissions    to send emails on behalf of a user. For example, <code>EWS.AccessAsUser.All</code>    Delegated permission within Office 365 Exchange Online scope should allow    emails to be sent. This permission is described as \"Access mailboxes as the    signed-in user via Exchange Web Services\" in the Azure portal.</p> <ol> <li>store the necessary credentials in a <code>.envrc</code> file</li> </ol> <p>The credentials should be stored in a <code>.envrc</code> file in the root directory of    the project. The file should container the following information:</p> <p><code>shell    # layout python    export CLIENT_ID=    export CLIENT_SECRET=    export TENANT_ID=    export ACCOUNT=    export USERNAME=    export USER_PASSWORD=    export AUTHOR=    export SCOPE=    export SERVER=</code></p> <p>Here's a brief explanation of each line above:</p> <ul> <li><code>layout python</code>: required for <code>direnv</code> to export the environment variables</li> <li><code>CLIENT_ID</code>:      ID of the app      created in Azure</li> <li><code>CLIENT_SECRET</code>:      secret      used by the app to authenticate to the email server</li> <li><code>TENANT_ID</code>:      ID of the organisation      in Azure</li> <li><code>ACCOUNT</code> : account to send emails from (e.g. abcdef@ucl.ac.uk)</li> <li><code>USERNAME</code>: username of sender (if at UCL, your UCL ID e.g. abcdefg)</li> <li><code>USER_PASSWORD</code>: password of sender</li> <li><code>AUTHOR</code>: emails address to send email from. Can be different to <code>ACCOUNT</code>      if, for example, sending from a shared mailbox</li> <li><code>SCOPE</code>:      scope      of the account (e.g. https://outlook.office365.com/.default)</li> <li> <p><code>SERVER</code>: server for      <code>exchanglib</code> configuration      (e.g. outlook.office365.com)</p> </li> <li> <p>[recommended] install and configure <code>direnv</code> to automatically export the    credentials as environment variables</p> </li> </ul> <p>Install <code>direnv</code> and then grant    it permission to load your <code>.envrc</code> file:</p> <p><code>bash    direnv allow .</code></p>"},{"location":"#installation","title":"Installation","text":"<p>We recommend installing in a project specific virtual environment created using a environment management tool such as Conda. To install the latest development version of <code>azure-mail</code> using <code>pip</code> in the currently active environment run</p> <pre><code>python -m pip install git+https://github.com/UCL-MIRSG/azure-mail.git\n</code></pre> <p>Alternatively create a local clone of the repository with</p> <pre><code>git clone https://github.com/UCL-MIRSG/azure-mail.git\n</code></pre> <p>and then install in editable mode by running</p> <pre><code>python -m pip install -e .\n</code></pre>"},{"location":"#usage-example","title":"Usage Example","text":"<pre><code>import azure_mail\n\n# Create a meeting invite to send as an attachment in your email\nattachments = azure_mail.create_calendar_ics(\n        subject=\"Meeting\",\n        description=\"Very important all-day meeting\",\n        date=\"January 1, 1970\",\n        start_hour=9,\n        start_minute=0,\n        duration_hours=8,\n        duration_minutes=0,\n        timezone=\"Europe/London\",\n    )\n\nmessage = azure_mail.create_email(\n        recipients={'person1@mail.com', 'someone-else@mail.com'},\n        body=exchangelib.HTMLBody(\n            \"&lt;html&gt;&lt;body&gt;Hello, there's a meeting invite attached&lt;/body&gt;&lt;/html&gt;\",\n        ),\n        subject='Meeting invite',\n        attachments=attachments,\n    )\n\n# Save email in Drafts folder\nmessage.save()\n\n# Send email to recipients\nmessage.send()\n</code></pre>"},{"location":"#overview","title":"Overview","text":"<p>The <code>ClientApplication</code> from python <code>msal</code> library is used to connect to an app installed in Microsoft Azure with the relevant permissions. An access token is acquired through <code>acquire_token_by_username_password</code> firstly and then the access token is cached so <code>acquire_token_silent</code> to be used in future uses of this package. This provides the necessary credentials and configuration to access the UCL account from which the emails are sent.</p>"},{"location":"#running-tests","title":"Running Tests","text":"<p>Tests can be run across all compatible Python versions in isolated environments using <code>tox</code> by running</p> <pre><code>tox\n</code></pre> <p>To run tests manually in a Python environment with <code>pytest</code> installed run</p> <pre><code>pytest tests\n</code></pre> <p>again from the root of the repository.</p>"},{"location":"#building-documentation","title":"Building Documentation","text":"<p>The MkDocs HTML documentation can be built locally by running</p> <pre><code>tox -e docs\n</code></pre> <p>from the root of the repository. The built documentation will be written to <code>site</code>.</p> <p>Alternatively to build and preview the documentation locally, in a Python environment with the optional <code>docs</code> dependencies installed, run</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"LICENSE/","title":"License","text":""},{"location":"LICENSE/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2024 MIRSG</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api/","title":"API reference","text":"<p>azure_mail package.</p>"},{"location":"api/#azure_mail.main","title":"<code>main</code>","text":"<p>Create an email to send with an Azure app.</p>"},{"location":"api/#azure_mail.main.create_calendar_ics","title":"<code>create_calendar_ics(subject, description, date, start_hour, start_minute=0, duration_hours=1, duration_minutes=0, timezone='Europe/London')</code>","text":"<p>Create an ICS calendar file for attaching in an email.</p> <p>Parameters:</p> Name Type Description Default <code>subject</code> <code>str</code> <p>Subject line of the mail as title of the event.</p> required <code>description</code> <code>str</code> <p>Description of the event.</p> required <code>date</code> <code>str</code> <p>Date of the event.</p> required <code>start_hour</code> <code>int</code> <p>Hour of the start of the event.</p> required <code>start_minute</code> <code>int</code> <p>Minute of the start of the event. Defaults to 0.</p> <code>0</code> <code>duration_hours</code> <code>int</code> <p>Duration of the event in hours.</p> <code>1</code> <code>duration_minutes</code> <code>int</code> <p>Duration of the event in minutes. Defaults to 0.</p> <code>0</code> <code>timezone</code> <code>str</code> <p>Timezone of the event. Defaults to \"Europe/London\".</p> <code>'Europe/London'</code> <pre><code>exchangelib.FileAttachment: ICS file attachment for the event.\n</code></pre> Source code in <code>src/azure_mail/main.py</code> <pre><code>def create_calendar_ics(  # noqa: PLR0913\n    subject: str,\n    description: str,\n    date: str,\n    start_hour: int,\n    start_minute: int = 0,\n    duration_hours: int = 1,\n    duration_minutes: int = 0,\n    timezone: str = \"Europe/London\",\n) -&gt; exchangelib.FileAttachment:\n    \"\"\"\n    Create an ICS calendar file for attaching in an email.\n\n    Args:\n        subject (str): Subject line of the mail as title of the event.\n        description (str): Description of the event.\n        date (str): Date of the event.\n        start_hour (int): Hour of the start of the event.\n        start_minute (int, optional): Minute of the start of the event.\n            Defaults to 0.\n        duration_hours (int, optional): Duration of the event in hours.\n        duration_minutes (int, optional): Duration of the event in minutes.\n            Defaults to 0.\n        timezone (str, optional): Timezone of the event. Defaults to \"Europe/London\".\n\n    Returns:\n    -------\n        exchangelib.FileAttachment: ICS file attachment for the event.\n\n    \"\"\"\n    date_time = dateutil.parser.parse(date)\n    time_start = date_time + datetime.timedelta(\n        hours=start_hour,\n        minutes=start_hour,\n    )\n    time_end = date_time + datetime.timedelta(\n        hours=start_hour + duration_hours,\n        minutes=start_minute + duration_minutes,\n    )\n\n    tz = pytz.timezone(timezone)\n    time_start = tz.localize(time_start)\n    time_end = tz.localize(time_end)\n\n    event = ics.Event()\n    event.name = subject\n    event.description = description\n    event.begin = time_start\n    event.end = time_end\n\n    calendar = ics.Calendar()\n    calendar.events.add(event)\n\n    return exchangelib.FileAttachment(\n        name=f\"{subject}.ics\",\n        content=bytes(calendar.serialize(), \"UTF-8\"),\n    )\n</code></pre>"},{"location":"api/#azure_mail.main.create_email","title":"<code>create_email(recipients, body, subject, attachments)</code>","text":"<p>Create an email to send to a list of users as bcc.</p> <p>Parameters:</p> Name Type Description Default <code>recipients</code> <code>list[str]</code> <p>A list of strings containing email addresses.</p> required <code>body</code> <code>HTMLBody</code> <p>body of the email.</p> required <code>subject</code> <code>str</code> <p>Subject of the email.</p> required <code>attachments</code> <code>list[FileAttachment]</code> <p>List of email attachments.</p> required <pre><code>exchangelib.Message: A message which contains subject, body, sender\nand recipients etc. To send the email, message.send() method can be used.\n</code></pre> Source code in <code>src/azure_mail/main.py</code> <pre><code>def create_email(\n    recipients: list[str],\n    body: exchangelib.HTMLBody,\n    subject: str,\n    attachments: list[exchangelib.FileAttachment],\n) -&gt; exchangelib.Message:\n    \"\"\"\n    Create an email to send to a list of users as bcc.\n\n    Args:\n        recipients (list[str]): A list of strings containing email addresses.\n        body (exchangelib.HTMLBody): body of the email.\n        subject (str): Subject of the email.\n        attachments (list[exchangelib.FileAttachment]): List of email attachments.\n\n\n    Returns:\n    -------\n        exchangelib.Message: A message which contains subject, body, sender\n        and recipients etc. To send the email, message.send() method can be used.\n\n    \"\"\"\n    access_token = _get_app_access_token()\n    account = _setup_email_account(\n        access_token=access_token,\n    )\n\n    message = exchangelib.Message(\n        account=account,\n        folder=account.drafts,\n        author=os.environ[\"AUTHOR\"],\n        subject=subject,\n        body=body,\n        to_recipients=[exchangelib.Mailbox(email_address=os.environ[\"AUTHOR\"])],\n        bcc_recipients=recipients,\n    )\n\n    message.attach(\n        attachments=attachments,\n    )\n\n    return message\n</code></pre>"},{"location":"api/#azure_mail.main.create_email_list","title":"<code>create_email_list(limit, recipients)</code>","text":"<p>Create an email distribution list.</p> <p>If you wish to send an email using the members of the distribution list, you can create a list with [member.mailbox for member in distribution_list.members].</p> Source code in <code>src/azure_mail/main.py</code> <pre><code>def create_email_list(\n    limit: str,\n    recipients: list[str],\n) -&gt; str:\n    \"\"\"\n    Create an email distribution list.\n\n    If you wish to send an email using the members of the distribution list, you can\n    create a list with [member.mailbox for member in distribution_list.members].\n    \"\"\"\n    access_token = _get_app_access_token()\n    account = _setup_email_account(\n        access_token=access_token,\n    )\n\n    # Retrieve or create a distribution list\n    dl_name = f\"{limit} Mailing List\"\n    distribution_list = None\n\n    # Check if the distribution list exists\n    for contact in account.contacts.all():\n        if contact.display_name == dl_name:\n            distribution_list = contact\n            break\n\n    # If it doesn't exist, create a new one\n    if not distribution_list:\n        distribution_list = exchangelib.DistributionList(\n            display_name=dl_name, account=account, folder=account.contacts\n        )\n        distribution_list.members = []\n        distribution_list.save()\n\n    # Ensure members attribute is initialised\n    if distribution_list.members is None:\n        distribution_list.members = []\n\n    # Add members to the distribution list\n    for email_address in recipients:\n        # Create a Member object for each email\n        member = exchangelib.properties.Member(\n            mailbox=exchangelib.Mailbox(\n                email_address=email_address, mailbox_type=\"OneOff\"\n            )  # Wrap Mailbox in Member\n        )\n        distribution_list.members.append(member)\n\n    # Save changes to the distribution list\n    distribution_list.save()\n\n    return account\n</code></pre>"}]}